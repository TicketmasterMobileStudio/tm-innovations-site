{"version":3,"sources":["main.js"],"names":["$","document","foundation","ready","injectCopy","$img","this","$copy","clone","hide","$oldSVG","next","after","SVGInjector","get","each","svg","length","remove","show","swapProductTitles","$productTitles","$menu","Foundation","MediaQuery","atLeast","text","dataset","shorttitle","title","$SVGImgs","filter","on","$btn","sizes","opts","closingTime","window","e","newSize","oldSize","inArray","DropdownMenu","hasClass","removeClass","current","viewport","test","createElement","style","height","documentElement","insertBefore","firstChild","cssHeight","offsetHeight","removeChild","innerHeight","min","Math","max","heightOffset","is","navHeight","css","$content","$bg","currentMargin","getComputedStyle","getPropertyValue","newOffset","parseFloat","options","barOffset","animationDuration","animationEasing","Magellan"],"mappings":"AAAA,YAEAA,GAAEC,UAAUC,aAEZF,EAAEC,UAAUE,MAAM,WAMhB,QAASC,KACP,GAAIC,GAAOL,EAAEM,MACTC,EAAQF,EAAKG,QAAQC,OACrBC,EAAUL,EAAKM,KAAK,gBACxBN,GAAKO,MAAML,GAEXM,YAAYN,EAAMO,IAAI,IACpBC,KAAM,SAASC,GAITN,EAAQO,OAAS,EACnBP,EAAQQ,SAERb,EAAKI,OAIPT,EAAEgB,GAAKG,UA2Bb,QAASC,KACP,GAAIC,GAAiBrB,EAAE,mBAAoBsB,EAEvCC,YAAWC,WAAWC,QAAQ,SAChCJ,EAAeN,KAAK,WAClBf,EAAEM,MAAMoB,KAAKpB,KAAKqB,QAAQC,cAG5BP,EAAeN,KAAK,WAClBf,EAAEM,MAAMoB,KAAKpB,KAAKqB,QAAQE,SAzDhC,GAAIC,GAAW9B,EAAE,qCACK8B,GAASC,OAAO,qBAyBtBC,GAAG,0BAA2B5B,GAC9C0B,EAASf,KAAKX,EAGd,IAAIkB,GAAQtB,EAAE,cACViC,EAAOjC,EAAE,gBACTkC,GAAS,QAAS,UAClBC,GAAQC,YAAa,IAgCzB,IA9BApC,EAAEqC,QAAQL,GAAG,wBAAyB,SAASM,EAAGC,EAASC,GACzD,IAAmC,IAA/BxC,EAAEyC,QAAQF,EAASL,KAAgD,IAA/BlC,EAAEyC,QAAQD,EAASN,GACzDZ,EAAMpB,WAAW,eACZ,KAAmC,IAA/BF,EAAEyC,QAAQF,EAASL,KAAgD,IAA/BlC,EAAEyC,QAAQD,EAASN,GACrD,GAAIX,YAAWmB,aAAapB,EAAOa,EAG5CF,GAAKU,SAAS,SAChBV,EAAKW,YAAY,UAmBrB5C,EAAEqC,QAAQL,GAAG,wBAAyBZ,GAGlCG,WAAWC,WAAWC,QAAQ,SAAU,CAC/B,GAAIF,YAAWmB,aAAapB,EAAOa,EAC9Cf,KAKF,GAAqC,SAAjCG,WAAWC,WAAWqB,QAAoB,CAG5C,GAAIC,GAAW,WAEd,GAAIC,GAAO9C,SAAS+C,cAAc,MAClCD,GAAKE,MAAMC,OAAS,QACpBjD,SAASkD,gBAAgBC,aAAaL,EAAM9C,SAASkD,gBAAgBE,WAErE,IAAIC,GAAYP,EAAKQ,YACrBtD,UAASkD,gBAAgBK,YAAYT,EAEpC,IAAIU,GAAcpB,OAAOoB,WAE1B,QACGC,IAAKC,KAAKD,IAAIJ,EAAWG,GACzBG,IAAKD,KAAKC,IAAIN,EAAWG,OAIzBI,EAAef,EAASc,IAAMd,EAASY,GAE3C,IAAI1D,EAAE,QAAQ8D,GAAG,SAAU,CACzB,GAAIC,GAAY/D,EAAE,kBAAkBkD,QAEpClD,GAAE,SAASgE,IAAI,SAAUlB,EAASY,IAAMK,GACxC/D,EAAE,WAAWgE,IAAI,SAAUlB,EAASc,SAE/B,IAAI5D,EAAE,QAAQ8D,GAAG,YAAa,CACnC,GAAIG,GAAWjE,EAAE,YACbkE,EAAMlE,EAAE,eACRmE,EAAgB9B,OAAO+B,iBAAiBH,EAASnD,IAAI,IAAIuD,iBAAiB,cAC1EC,EAAYC,WAAWJ,GAAiBN,CAE5CI,GAASD,IAAI,aAAcM,GAC3BJ,EAAIF,IAAI,SAAUM,IAKtB,GAAIE,IACHC,UAA4C,SAAjClD,WAAWC,WAAWqB,SAAsB,GAAK,GAC5D6B,kBAAmB,IACnBC,gBAAiB,QAEF,IAAIpD,YAAWqD,SAAS5E,EAAE,eAAgBwE","file":"main.min.js","sourcesContent":["'use strict';\n\n$(document).foundation();\n\n$(document).ready(function() {\n\n  // Inject SVGs so we can change colors\n  var $SVGImgs = $('.product-nav-icon, .dropdown-arrow');\n  var $responsiveSVGs = $SVGImgs.filter('.product-nav-icon');\n\n  function injectCopy() {\n    var $img = $(this);\n    var $copy = $img.clone().hide();\n    var $oldSVG = $img.next('.injected-svg');\n    $img.after($copy);\n\n    SVGInjector($copy.get(0), {\n      each: function(svg) {\n\n        // When the injection is done,\n        // hide any previous <svg> or <img> elements\n        if ($oldSVG.length > 0) {\n          $oldSVG.remove();\n        } else {\n          $img.hide();\n        }\n\n        // ..and show the injected copy\n        $(svg).show();\n      }\n    });\n  }\n\n  $responsiveSVGs.on('replaced.zf.interchange', injectCopy);\n  $SVGImgs.each(injectCopy);\n\n  // Call responsive dropdown manually, since the builtin method breaks on resize\n  var $menu = $('#main-menu');\n  var $btn = $('#menu-button');\n  var sizes = ['small', 'medium'];\n  var opts = {closingTime: 300};\n\n  $(window).on('changed.zf.mediaquery', function(e, newSize, oldSize) {\n    if ($.inArray(newSize, sizes) !== -1 && $.inArray(oldSize, sizes) === -1) {\n      $menu.foundation('destroy');\n    } else if ($.inArray(newSize, sizes) === -1 && $.inArray(oldSize, sizes) !== -1) {\n      var menu = new Foundation.DropdownMenu($menu, opts);\n    }\n\n    if ($btn.hasClass('open')) {\n      $btn.removeClass('open');\n    }\n  });\n\n  // Swap titles with short titles on large screens\n  function swapProductTitles() {\n    var $productTitles = $('span[data-title]', $menu);\n\n    if (Foundation.MediaQuery.atLeast('large')) {\n      $productTitles.each(function() {\n        $(this).text(this.dataset.shorttitle);\n      });\n    } else {\n      $productTitles.each(function() {\n        $(this).text(this.dataset.title);\n      });\n    }\n  }\n\n  $(window).on('changed.zf.mediaquery', swapProductTitles);\n\n  // Add the dropdown on first load on large screens\n  if (Foundation.MediaQuery.atLeast('large')) {\n    var menu = new Foundation.DropdownMenu($menu, opts);\n    swapProductTitles();\n  }\n\n  // Set the panel height on mobile screens to account for collapsing browser chrome\n  // TODO: Figure out how to get viewport.max accurately on iOS Chrome\n  if (Foundation.MediaQuery.current == 'small') {\n\n    // Adapted from https://gist.github.com/scottjehl/2051999\n    var viewport = (function() {\n\n    \tvar test = document.createElement('div');\n    \ttest.style.height = '100vh';\n    \tdocument.documentElement.insertBefore(test, document.documentElement.firstChild);\n\n    \tvar cssHeight = test.offsetHeight;\n    \tdocument.documentElement.removeChild(test);\n\n      var innerHeight = window.innerHeight;\n\n    \treturn {\n        min: Math.min(cssHeight, innerHeight),\n        max: Math.max(cssHeight, innerHeight)\n      };\n    })();\n\n    var heightOffset = viewport.max - viewport.min;\n\n    if ($('body').is('.home')) {\n      var navHeight = $('.nav-container').height();\n\n      $('#hero').css('height', viewport.min - navHeight);\n      $('article').css('height', viewport.max);\n\n    } else if ($('body').is('.product')) {\n      var $content = $('.content');\n      var $bg = $('.background');\n      var currentMargin = window.getComputedStyle($content.get(0)).getPropertyValue('margin-top');\n      var newOffset = parseFloat(currentMargin) - heightOffset;\n\n      $content.css('margin-top', newOffset);\n      $bg.css('height', newOffset)\n    }\n  }\n\n  // init more arrow\n  var options = {\n   barOffset: Foundation.MediaQuery.current == 'small' ? -25 : 55,\n   animationDuration: 300,\n   animationEasing: 'swing'\n  }\n  var moreArrow = new Foundation.Magellan($('.more-arrow'), options);\n});\n"]}