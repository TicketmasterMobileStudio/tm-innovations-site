{"version":3,"sources":["main.js"],"names":["$","document","foundation","viewport","test","createElement","style","height","documentElement","insertBefore","firstChild","cssHeight","offsetHeight","removeChild","innerHeight","window","min","Math","max","ready","swapProductTitles","$productTitles","$menu","Foundation","MediaQuery","atLeast","each","this","text","dataset","shorttitle","title","$SVGImgs","injectCopy","$img","$copy","clone","hide","$oldSVG","next","after","SVGInjector","get","svg","length","remove","show","filter","on","$btn","sizes","opts","closingTime","e","newSize","oldSize","inArray","DropdownMenu","hasClass","removeClass"],"mappings":"AAAAA,EAAEC,UAAUC,YAKZ,IAAIC,UAAW,WACb,YAEA,IAAIC,GAAOH,SAASI,cAAc,MAClCD,GAAKE,MAAMC,OAAS,QACpBN,SAASO,gBAAgBC,aAAaL,EAAMH,SAASO,gBAAgBE,WAErE,IAAIC,GAAYP,EAAKQ,YACrBX,UAASO,gBAAgBK,YAAYT,EAErC,IAAIU,GAAcC,OAAOD,WAEzB,QACEE,IAAKC,KAAKD,IAAIL,EAAWG,GACzBI,IAAKD,KAAKC,IAAIP,EAAWG,MAI7Bd,GAAEC,UAAUkB,MAAM,WAChB,YAmDA,SAASC,KACP,GAAIC,GAAiBrB,EAAE,mBAAoBsB,EAEvCC,YAAWC,WAAWC,QAAQ,SAChCJ,EAAeK,KAAK,WAClB1B,EAAE2B,MAAMC,KAAKD,KAAKE,QAAQC,cAG5BT,EAAeK,KAAK,WAClB1B,EAAE2B,MAAMC,KAAKD,KAAKE,QAAQE,SAzDhC,GAAIC,GAAWhC,EAAE,sCAGbiC,EAAa,WACf,GAAIC,GAAOlC,EAAE2B,MACTQ,EAAQD,EAAKE,QAAQC,OACrBC,EAAUJ,EAAKK,KAAK,gBACxBL,GAAKM,MAAML,GAEXM,YAAYN,EAAMO,IAAI,IACpBhB,KAAM,SAASiB,GAITL,EAAQM,OAAS,EACnBN,EAAQO,SAERX,EAAKG,OAIPrC,EAAE2C,GAAKG,UApBSd,GAASe,OAAO,qBAyBtBC,GAAG,0BAA2Bf,GAC9CD,EAASN,KAAKO,EAGd,IAAIX,GAAQtB,EAAE,cACViD,EAAOjD,EAAE,gBACTkD,GAAS,QAAS,UAClBC,GAAQC,YAAa,IAgCzB,IA9BApD,EAAEe,QAAQiC,GAAG,wBAAyB,SAASK,EAAGC,EAASC,GACzD,IAAmC,IAA/BvD,EAAEwD,QAAQF,EAASJ,KAAgD,IAA/BlD,EAAEwD,QAAQD,EAASL,GACzD5B,EAAMpB,WAAW,eACZ,KAAmC,IAA/BF,EAAEwD,QAAQF,EAASJ,KAAgD,IAA/BlD,EAAEwD,QAAQD,EAASL,GACrD,GAAI3B,YAAWkC,aAAanC,EAAO6B,EAG5CF,GAAKS,SAAS,SAChBT,EAAKU,YAAY,UAmBrB3D,EAAEe,QAAQiC,GAAG,wBAAyB5B,GAGlCG,WAAWC,WAAWC,QAAQ,SAAU,CAC/B,GAAIF,YAAWkC,aAAanC,EAAO6B,EAC9C/B","file":"main.min.js","sourcesContent":["$(document).foundation();\n\n// Get the viewport, used for height-related layouts\n// Adapted from https://gist.github.com/scottjehl/2051999\n// TODO: Figure out how to get viewport.max accurately on iOS Chrome\nvar viewport = (function() {\n  'use strict';\n\n  var test = document.createElement('div');\n  test.style.height = '100vh';\n  document.documentElement.insertBefore(test, document.documentElement.firstChild);\n\n  var cssHeight = test.offsetHeight;\n  document.documentElement.removeChild(test);\n\n  var innerHeight = window.innerHeight;\n\n  return {\n    min: Math.min(cssHeight, innerHeight),\n    max: Math.max(cssHeight, innerHeight)\n  };\n})();\n\n$(document).ready(function() {\n  'use strict';\n\n  // Inject SVGs so we can change colors\n  var $SVGImgs = $('.product-nav-icon, .dropdown-arrow');\n  var $responsiveSVGs = $SVGImgs.filter('.product-nav-icon');\n\n  var injectCopy = function() {\n    var $img = $(this);\n    var $copy = $img.clone().hide();\n    var $oldSVG = $img.next('.injected-svg');\n    $img.after($copy);\n\n    SVGInjector($copy.get(0), {\n      each: function(svg) {\n\n        // When the injection is done,\n        // hide any previous <svg> or <img> elements\n        if ($oldSVG.length > 0) {\n          $oldSVG.remove();\n        } else {\n          $img.hide();\n        }\n\n        // ..and show the injected copy\n        $(svg).show();\n      }\n    });\n  };\n\n  $responsiveSVGs.on('replaced.zf.interchange', injectCopy);\n  $SVGImgs.each(injectCopy);\n\n  // Call responsive dropdown manually, since the builtin method breaks on resize\n  var $menu = $('#main-menu');\n  var $btn = $('#menu-button');\n  var sizes = ['small', 'medium'];\n  var opts = {closingTime: 300};\n\n  $(window).on('changed.zf.mediaquery', function(e, newSize, oldSize) {\n    if ($.inArray(newSize, sizes) !== -1 && $.inArray(oldSize, sizes) === -1) {\n      $menu.foundation('destroy');\n    } else if ($.inArray(newSize, sizes) === -1 && $.inArray(oldSize, sizes) !== -1) {\n      var menu = new Foundation.DropdownMenu($menu, opts);\n    }\n\n    if ($btn.hasClass('open')) {\n      $btn.removeClass('open');\n    }\n  });\n\n  // Swap titles with short titles on large screens\n  function swapProductTitles() {\n    var $productTitles = $('span[data-title]', $menu);\n\n    if (Foundation.MediaQuery.atLeast('large')) {\n      $productTitles.each(function() {\n        $(this).text(this.dataset.shorttitle);\n      });\n    } else {\n      $productTitles.each(function() {\n        $(this).text(this.dataset.title);\n      });\n    }\n  }\n\n  $(window).on('changed.zf.mediaquery', swapProductTitles);\n\n  // Add the dropdown on first load on large screens\n  if (Foundation.MediaQuery.atLeast('large')) {\n    var menu = new Foundation.DropdownMenu($menu, opts);\n    swapProductTitles();\n  }\n});\n"]}