{"version":3,"sources":["main.js"],"names":["viewport","test","document","createElement","style","height","documentElement","insertBefore","firstChild","cssHeight","offsetHeight","removeChild","innerHeight","window","min","Math","max","$","on","e","Foundation","MediaQuery","atLeast","target","removeClass","attr","foundation","ready","$SVGImgs","injectCopy","$img","this","$copy","clone","hide","$oldSVG","next","after","SVGInjector","get","each","svg","length","remove","show","filter","$menu","$btn","sizes","opts","closingTime","newSize","oldSize","inArray","DropdownMenu","hasClass","parent","toggleClass","scrollTop","click","stopPropagation"],"mappings":"AAGA,IAAIA,SAAW,WACb,aAEA,IAAIC,EAAOC,SAASC,cAAc,OAClCF,EAAKG,MAAMC,OAAS,QACpBH,SAASI,gBAAgBC,aAAaN,EAAMC,SAASI,gBAAgBE,YAErE,IAAIC,EAAYR,EAAKS,aACrBR,SAASI,gBAAgBK,YAAYV,GAErC,IAAIW,EAAcC,OAAOD,YAEzB,OACEE,IAAKC,KAAKD,IAAIL,EAAWG,GACzBI,IAAKD,KAAKC,IAAIP,EAAWG,IAdd,GAmBfK,EAAEJ,QAAQK,GAAG,+BAAgC,SAASC,GAC/CC,WAAWC,WAAWC,QAAQ,WACjCL,EAAEE,EAAEI,QAAQC,YAAY,4BAA4BC,KAAK,QAAS,MAItER,EAAEf,UAAUwB,aAAaC,MAAM,WAC7B,aAGA,IAAIC,EAAWX,EAAE,oDAGbY,EAAa,WACf,IAAIC,EAAOb,EAAEc,MACTC,EAAQF,EAAKG,QAAQC,OACrBC,EAAUL,EAAKM,KAAK,iBACxBN,EAAKO,MAAML,GAEXM,YAAYN,EAAMO,IAAI,IACpBC,KAAM,SAASC,GAITN,EAAQO,OAAS,EACnBP,EAAQQ,SAERb,EAAKI,OAIPjB,EAAEwB,GAAKG,WApBShB,EAASiB,OAAO,qBAyBtB3B,GAAG,0BAA2BW,GAC9CD,EAASY,KAAKX,GAGd,IAAIiB,EAAQ7B,EAAE,cACV8B,EAAO9B,EAAE,gBACT+B,GAAS,QAAS,UAClBC,GAAQC,YAAa,KAgBzB,GAdAjC,EAAEJ,QAAQK,GAAG,wBAAyB,SAASC,EAAGgC,EAASC,GACzD,IAAmC,IAA/BnC,EAAEoC,QAAQF,EAASH,KAAgD,IAA/B/B,EAAEoC,QAAQD,EAASJ,GACzDF,EAAMpB,WAAW,gBACZ,IAAmC,IAA/BT,EAAEoC,QAAQF,EAASH,KAAgD,IAA/B/B,EAAEoC,QAAQD,EAASJ,GACrD,IAAI5B,WAAWkC,aAAaR,EAAOG,GAG5CF,EAAKQ,SAAS,UAChBR,EAAKvB,YAAY,QACjBP,EAAE,QAAQO,YAAY,gBAKtBJ,WAAWC,WAAWC,QAAQ,SACrB,IAAIF,WAAWkC,aAAaR,EAAOG,GAIhDF,EAAKS,SAAStC,GAAG,8BAA+B,SAASC,GACvDF,EAAE,QAAQwC,YAAY,aAAcV,EAAKQ,SAAS,SAE7CR,EAAKQ,SAAS,SAAYnC,WAAWC,WAAWC,QAAQ,WAC3DL,EAAEJ,QAAQ6C,UAAU,KAKxBzC,EAAE,mBAAmB0C,MAAM,SAASxC,GAClCA,EAAEyC","file":"main.min.js","sourcesContent":["// Get the viewport, used for height-related layouts\n// Adapted from https://gist.github.com/scottjehl/2051999\n// TODO: Figure out how to get viewport.max accurately on iOS Chrome\nvar viewport = (function() {\n  'use strict';\n\n  var test = document.createElement('div');\n  test.style.height = '100vh';\n  document.documentElement.insertBefore(test, document.documentElement.firstChild);\n\n  var cssHeight = test.offsetHeight;\n  document.documentElement.removeChild(test);\n\n  var innerHeight = window.innerHeight;\n\n  return {\n    min: Math.min(cssHeight, innerHeight),\n    max: Math.max(cssHeight, innerHeight)\n  };\n})();\n\n// Prevent small screen page refresh sticky bug\n$(window).on('sticky.zf.unstuckfrom:bottom', function(e) {\n  if (!Foundation.MediaQuery.atLeast('medium')) {\n    $(e.target).removeClass('is-anchored is-at-bottom').attr('style', '');\n  }\n});\n\n$(document).foundation().ready(function() {\n  'use strict';\n\n  // Inject SVGs so we can change colors\n  var $SVGImgs = $('.product-nav-icon, .dropdown-arrow, .overlay img');\n  var $responsiveSVGs = $SVGImgs.filter('.product-nav-icon');\n\n  var injectCopy = function() {\n    var $img = $(this);\n    var $copy = $img.clone().hide();\n    var $oldSVG = $img.next('.injected-svg');\n    $img.after($copy);\n\n    SVGInjector($copy.get(0), {\n      each: function(svg) {\n\n        // When the injection is done,\n        // hide any previous <svg> or <img> elements\n        if ($oldSVG.length > 0) {\n          $oldSVG.remove();\n        } else {\n          $img.hide();\n        }\n\n        // ..and show the injected copy\n        $(svg).show();\n      }\n    });\n  };\n\n  $responsiveSVGs.on('replaced.zf.interchange', injectCopy);\n  $SVGImgs.each(injectCopy);\n\n  // Call responsive dropdown manually, since the builtin method breaks on resize\n  var $menu = $('#main-menu');\n  var $btn = $('#menu-button');\n  var sizes = ['small', 'medium'];\n  var opts = {closingTime: 300};\n\n  $(window).on('changed.zf.mediaquery', function(e, newSize, oldSize) {\n    if ($.inArray(newSize, sizes) !== -1 && $.inArray(oldSize, sizes) === -1) {\n      $menu.foundation('destroy');\n    } else if ($.inArray(newSize, sizes) === -1 && $.inArray(oldSize, sizes) !== -1) {\n      var menu = new Foundation.DropdownMenu($menu, opts);\n    }\n\n    if ($btn.hasClass('open')) {\n      $btn.removeClass('open');\n      $('html').removeClass('menu-open');\n    }\n  });\n\n  // Add the dropdown on first load on large screens\n  if (Foundation.MediaQuery.atLeast('large')) {\n    var menu = new Foundation.DropdownMenu($menu, opts);\n  }\n\n  // Add an html class based on menu state\n  $btn.parent().on('toggled.zf.responsiveToggle', function(e) {\n    $('html').toggleClass('menu-open', !$btn.hasClass('open'));\n\n    if (!$btn.hasClass('open') && !Foundation.MediaQuery.atLeast('medium')) {\n      $(window).scrollTop(0);\n    }\n  });\n\n  // Don't close dropdown when unreleased product is clicked\n  $('.unreleased > a').click(function(e) {\n    e.stopPropagation();\n  });\n});\n"]}