// calculate padding in order to show title and 1 line of text
@mixin vertical-offset($size, $prop: margin-top) {
  #{$prop}: calc(100vh - #{
    $header-height
    + map-get($vertical-spacing, $size)
    + rem-calc(map-deep-get($header-styles, $size, 'h1', 'font-size')) * map-deep-get($header-styles, $size, 'h1', 'line-height')
    + $header-margin-bottom
    + $paragraph-lineheight
  });
}

body {
  &.product {

    // TODO: Get rid of this presentational div, yuck
    .background {
      background-color: $dark-gray;
      background-image: linear-gradient($primary-color, $primary-color-dark);
      background-position: center;
      background-repeat: repeat-x;
      background-size: cover;
      height: calc(100vh - #{$header-height});
      left: 0;
      position: fixed;
      top: $header-height;
      width: 100%;
      z-index: -1;

      @media screen and #{breakpoint(medium only)} and #{breakpoint(portrait)} {
        &.image-interest-left { background-position: 25%; }
        &.image-interest-right { background-position: 75%; }
      }

      @include breakpoint(small only) {
        @include vertical-offset('small', 'height');
        position: absolute;

        &.image-interest-left { background-position: 25%; }
        &.image-interest-right { background-position: 75%; }
      }
    }

    .product-icon {
      position: fixed;
      top: $header-height + rem-calc(20);

      @include breakpoint(small only) { position: absolute; }

      @each $size, $margin in $side-margins {
        @include breakpoint($size) {
          right: $margin;
          top: $header-height + $margin;
        }
      }
    }

    .content {
      @include vertical-offset('small');
      position: relative; // fix z-index

      @include breakpoint(medium up) {
        @keyframes slide-up {
          0% { margin-top: calc(100vh - #{$header-height}); }
          100% { @include vertical-offset('medium'); }
        }

        animation-delay: .5s;
        animation-duration: .4s;
        animation-fill-mode: forwards;
        animation-name: slide-up;
        animation-timing-function: cubic-bezier(.3, 1.4, .6, 1);
        margin-top: calc(100vh - #{$header-height});
      }

      // Override sizing - this could use some optimizing
      // Cap h1 size at medium breakpoint
      h1 {
        @include breakpoint(large up) {
          font-size: rem-calc(map-deep-get($header-styles, 'medium', 'h1', 'font-size'));
          line-height: map-deep-get($header-styles, 'medium', 'h1', 'line-height');
        }
      }

      // Bring h2 size up to match h1 and cap at medium breakpoint
      h2 {
        font-size: rem-calc(map-deep-get($header-styles, 'small', 'h1', 'font-size'));
        line-height: map-deep-get($header-styles, 'small', 'h1', 'line-height');
        margin-top: map-get($vertical-spacing, small);

        @include breakpoint(medium up) {
          font-size: rem-calc(map-deep-get($header-styles, 'medium', 'h1', 'font-size'));
          line-height: map-deep-get($header-styles, 'medium', 'h1', 'line-height');
        }
      }

      .inner-content {
        li {
          margin-bottom: 1rem;

          ol,
          ul {
            margin-top: 1rem;
          }
        }

        ol { margin-left: 2.5rem; }

        ol > li {
          counter-increment: list;
          list-style: none;
          position: relative;

          &::before {
            border: 1px solid $medium-gray;
            border-radius: (1.75rem / 2);
            color: $medium-gray;
            content: counter(list);
            height: 1.75rem;
            left: -2.5rem;
            line-height: 1.75rem;
            position: absolute;
            text-align: center;
            top: (-.25rem / 2);
            width: 1.75rem;
          }
        }

        p > .button {
          margin: map-get($vertical-spacing, small) - 1rem 0 0;
        }

        > :last-child {
          &,
          .button {
            margin-bottom: 0;
          }
        }
      }
    }

    // TODO: Simplify this insanity
    article {
      background-color: $white;

      .inner-content-container {
        @include grid-row;

        @include breakpoint(large up) {
          @include grid-row(null, nest);
        }
      }

      .inner-content {
        padding: map-get($vertical-spacing, small) map-get($side-margins, small);

        @include breakpoint(medium up) {
          @include grid-column(8);
          @include grid-column-position(center);
          padding: map-get($vertical-spacing, medium) 0;
        }

        @include breakpoint(large up) {
          @include grid-column-size(6 of 10);
        }
      }
    }

    // Manual styling and animating of overlay graphics
    @keyframes fade-in-bubbles {
      0% {
        opacity: 0;
        transform: translateY(16px);
      }

      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .overlay {
      position: relative;
      text-align: center;
      top: 50%;
      transform: translateY(-50%);

      @include breakpoint(medium up) { top: 40%; }

      img {
        &[src$='.svg'] { display: none; }

        &:not([src$='.svg']) {
          animation-delay: 1s;
          animation-duration: .4s;
          animation-fill-mode: forwards;
          animation-name: fade-in-bubbles;
          animation-timing-function: cubic-bezier(0, 0, .3, 1);
          opacity: 0;
        }
      }

      svg {
        display: inline-block;
        max-width: 100%;
      }

      svg [id='conversation-bubbles'] {
        > g > g {
          animation-duration: .4s;
          animation-fill-mode: forwards;
          animation-name: fade-in-bubbles;
          animation-timing-function: cubic-bezier(0, 0, .3, 1);
          opacity: 0;
        }
      }

      svg [id='google-assistant-conversation'] > g > g {
        &:nth-child(1) > g { animation-delay: 1s; }
        &:nth-child(2) > g { animation-delay: 1.5s; }
        &:nth-child(3) > g { animation-delay: 3.5s; }
        &:nth-child(4) > g { animation-delay: 5s; }
        &:nth-child(5) > g { animation-delay: 6s; }
      }

      svg [id='messenger-bot-overlay'] > g > g {
        &:nth-child(1) > g { animation-delay: 1s; }
        &:nth-child(2) > g { animation-delay: 1.5s; }
      }
    }
  }
}
